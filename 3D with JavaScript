var vertexShaderText = 
[
  'precision mediump float;',
  '',
  'attribute vec3 vertPosition;',
  'attribute vec3 vertColor;',
  'varying vec3 fragColor;',
  'uniform mat4 mWorld;',
  'uniform mat4 mView;',
  'uniform mat4 mProj;',
  '',
  'void main()',
  '{',
  '  fragColor = vertColor;',
  '  gl_Position = mProj * mView * mWorld * vec4(vertPosition, 1.0);',
  '}'
  ].join('\n');

var fragmentShaderText =
[
'precision mediump float;',
'',
'varying vec3 fragColor;',
'void main()',
'{',
'  gl_FragColor = vec4(fragColor, 1.0);',
'}'
].join('\n');

var InitDemo = function () {
	console.log('This is working');

	var canvas = document.getElementById('game-surface');
	var gl = canvas.getContext('webgl');

	if (!gl) {
		console.log('WebGL not supported, falling back on experimental-webgl');
		gl = canvas.getContext('experimental-webgl');
	}

	if (!gl) {
		alert('Your browser does not support WebGL');
	}

	gl.clearColor(0.75, 0.85, 0.8, 1.0);
	gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
	gl.enable(gl.DEPTH_TEST)

	//
	// Create shaders
	// 
	var vertexShader = gl.createShader(gl.VERTEX_SHADER);
	var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);

	gl.shaderSource(vertexShader, vertexShaderText);
	gl.shaderSource(fragmentShader, fragmentShaderText);

	gl.compileShader(vertexShader);
	if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
		console.error('ERROR compiling vertex shader!', gl.getShaderInfoLog(vertexShader));
		return;
	}

	gl.compileShader(fragmentShader);
	if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
		console.error('ERROR compiling fragment shader!', gl.getShaderInfoLog(fragmentShader));
		return;
	}

	var program = gl.createProgram();
	gl.attachShader(program, vertexShader);
	gl.attachShader(program, fragmentShader);
	gl.linkProgram(program);
	if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
		console.error('ERROR linking program!', gl.getProgramInfoLog(program));
		return;
	}
	gl.validateProgram(program);
	if (!gl.getProgramParameter(program, gl.VALIDATE_STATUS)) {
		console.error('ERROR validating program!', gl.getProgramInfoLog(program));
		return;
	}

	//
	// Create buffer
	//
	var axesVertices = 
	[ // X, Y,       R, G, B

    // X axis (Red)
    -4.0, 0.0, 0.0,   1.0, 0.0, 0.0,
    4.0, 0.0, 0.0,    1.0, 0.0, 0.0,

    // Y axis (Green)
    0.0, -4.0, 0.0,   0.0, 1.0, 0.0,
    0.0, 4.0, 0.0,    0.0, 1.0, 0.0,

    // Z axis (Blue)
    0.0, 0.0, -4.0,   0.0, 0.0, 1.0,
    0.0, 0.0, 4.0,    0.0, 0.0, 1.0
	];
	var axesBufferObject = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER, axesBufferObject);
	gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(axesVertices), gl.STATIC_DRAW);

	var houseVertices = [
		-1.0, 0.0, 0.0,    1.0, 1.0, 0.0,  
		0.0, -0.3, -1.0,  0.7, 0.0, 1.0,   
		1.0, 0.0, 0.0,   0.1, 1.0, 0.6, 

		-1.0, 0.0, -2.0,    1.0, 1.0, 0.0,  
		0.0, -0.3, -1.0,  0.7, 0.0, 1.0,   
		-1.0, 0.0, 0.0,   0.1, 1.0, 0.6, 

		-1.0, 0.0, -2.0,    1.0, 1.0, 0.0,  
		0.0, -0.3, -1.0,  0.7, 0.0, 1.0,   
		1.0, 0.0, -2.0,   0.1, 1.0, 0.6, 

		1.0, 0.0, -2.0,    1.0, 1.0, 0.0,  
		0.0, -0.3, -1.0,  0.7, 0.0, 1.0,   
		1.0, 0.0, 0.0,   0.1, 1.0, 0.6, 


		-1.0, 0.0, 2.0,    1.0, 1.0, 0.0,  
		0.0, 0.3, 1.0,  0.7, 0.0, 1.0,   
		1.0, 0.0, 2.0,   0.1, 1.0, 0.6, 

		-1.0, 0.0, 2.0,    1.0, 1.0, 0.0,  
		0.0, 0.3, 1.0,  0.7, 0.0, 1.0,   
		-1.0, 0.0, 0.0,   0.1, 1.0, 0.6, 

		-1.0, 0.0, 0.0,    1.0, 1.0, 0.0,  
		0.0, 0.3, 1.0,  0.7, 0.0, 1.0,   
		1.0, 0.0, 0.0,   0.1, 1.0, 0.6, 

		1.0, 0.0, 2.0,    1.0, 1.0, 0.0,  
		0.0, 0.3, 1.0,  0.7, 0.0, 1.0,   
		1.0, 0.0, 0.0,   0.1, 1.0, 0.6, 

		-3.0, 0.0, 2.0,    1.0, 1.0, 0.0,  
		-2.0, -0.3, 1.0,  0.7, 0.0, 1.0,   
		-1.0, 0.0, 2.0,   0.1, 1.0, 0.6, 

		-3.0, 0.0, 2.0,    1.0, 1.0, 0.0,  
		-2.0, -0.3, 1.0,  0.7, 0.0, 1.0,   
		-3.0, 0.0, 0.0,   0.1, 1.0, 0.6, 

		-3.0, 0.0, 0.0,    1.0, 1.0, 0.0,  
		-2.0, -0.3, 1.0,  0.7, 0.0, 1.0,   
		-1.0, 0.0, 0.0,   0.1, 1.0, 0.6, 

		-1.0, 0.0, 2.0,    1.0, 1.0, 0.0,  
		-2.0, -0.3, 1.0,  0.7, 0.0, 1.0,   
		-1.0, 0.0, 0.0,   0.1, 1.0, 0.6, 

		-3.0, 0.0, 0.0,    1.0, 1.0, 0.0,  
		-2.0, 0.3, -1.0,  0.7, 0.0, 1.0,   
		-1.0, 0.0, 0.0,   0.1, 1.0, 0.6, 

		-3.0, 0.0, 0.0,    1.0, 1.0, 0.0,  
		-2.0, 0.3, -1.0,  0.7, 0.0, 1.0,   
		-3.0, 0.0, -2.0,   0.1, 1.0, 0.6, 

		-3.0, 0.0, -2.0,    1.0, 1.0, 0.0,  
		-2.0, 0.3, -1.0,  0.7, 0.0, 1.0,   
		-1.0, 0.0, -2.0,   0.1, 1.0, 0.6, 

		-1.0, 0.0, 0.0,    1.0, 1.0, 0.0,  
		-2.0, 0.3, -1.0,  0.7, 0.0, 1.0,   
		-1.0, 0.0, -2.0,   0.1, 1.0, 0.6, 


		0.0, 0.0, 1.0,   1.0, 0.2, 0.3, 
		1.0, 0.0, 1.0,   1.0, 0.2, 0.3,
		1.0, 1.0, 1.0,   1.0, 0.2, 0.3,
		1.0, 1.0, 1.0,   1.0, 0.2, 0.3,
		0.0, 1.0, 1.0,   1.0, 0.2, 0.3,
		0.0, 0.0, 1.0,   1.0, 0.2, 0.3,

		0.0, 0.0, 0.0,   1.0, 0.1, 0.3,
		0.0, 0.0, 1.0,   1.0, 0.1, 0.3,
		0.0, 1.0, 1.0,   1.0, 0.1, 0.3,
		0.0, 1.0, 1.0,   1.0, 0.1, 0.3,
		0.0, 1.0, 0.0,   1.0, 0.1, 0.3,
		0.0, 0.0, 0.0,   1.0, 0.1, 0.3,

		0.0, 0.0, 0.0,   1.0, 0.4, 0.8,
		1.0, 0.0, 0.0,   1.0, 0.4, 0.8,
		1.0, 1.0, 0.0,   1.0, 0.4, 0.8,
		1.0, 1.0, 0.0,   1.0, 0.4, 0.8,
		0.0, 1.0, 0.0,   1.0, 0.4, 0.8,
		0.0, 0.0, 0.0,   1.0, 0.4, 0.8,

		1.0, 0.0, 0.0,   1.0, 0.3, 0.3,
		1.0, 0.0, 1.0,   1.0, 0.3, 0.3,
		1.0, 1.0, 1.0,   1.0, 0.3, 0.3,
		1.0, 1.0, 1.0,   1.0, 0.3, 0.3,
		1.0, 1.0, 0.0,   1.0, 0.3, 0.3,
		1.0, 0.0, 0.0,   1.0, 0.3, 0.3,

		
		-0.3, 1.0, 1.0,  0.8, 0.1, 0.1,
		-0.3, 1.0, 0.7,  0.8, 0.1, 0.1,
		1.3, 1.0, 0.7,   0.8, 0.1, 0.1,
		1.3, 1.0, 0.7,   0.8, 0.1, 0.1,
		1.3, 1.0, 1.0,   0.8, 0.1, 0.1,
		-0.3, 1.0, 1.0,  0.8, 0.1, 0.1,

		-0.3, 1.0, 0.0,  0.8, 0.2, 0.1,
		-0.3, 1.0, -0.3, 0.8, 0.2, 0.1,
		1.3, 1.0, -0.3,  0.8, 0.2, 0.1,
		1.3, 1.0, -0.3,  0.8, 0.2, 0.1,
		1.3, 1.0, 0.0,   0.8, 0.2, 0.1,
		-0.3, 1.0, 0.0,  0.8, 0.2, 0.1,

		0.0, 1.0, 0.0,   0.7, 0.1, 0.1,
		-0.3, 1.0, 0.0,  0.7, 0.1, 0.1,
		0.0, 1.0, 1.0,   0.7, 0.1, 0.1,
		0.0, 1.0, 1.0,   0.7, 0.1, 0.1,
		-0.3, 1.0, 1.0,  0.7, 0.1, 0.1,
		-0.3, 1.0, 0.0,  0.7, 0.1, 0.1,

		1.0, 1.0, 0.0,  0.6, 0.2, 0.1,
		1.3, 1.0, 0.0,  0.6, 0.2, 0.1,
		1.0, 1.0, 1.0,  0.6, 0.2, 0.1,
		1.0, 1.0, 1.0,  0.6, 0.2, 0.1,
		1.3, 1.0, 1.0,  0.6, 0.2, 0.1,
		1.3, 1.0, 0.0,  0.6, 0.2, 0.1,

		-0.3, 1.0, 1.0, 0.6, 0.2, 0.1,
		0.5, 1.5, 0.5,   0.6, 0.2, 0.1,
		1.3, 1.0, 1.0,  0.6, 0.2, 0.1,

		-0.3, 1.0, -0.3, 0.6, 0.2, 0.1,
		0.5, 1.5, 0.5,   0.6, 0.2, 0.1,
		1.3, 1.0, -0.3,  0.6, 0.2, 0.1,

		-0.3, 1.0, -0.3, 0.5, 0.3, 0.1,
		0.3, 1.5, 0.5,   0.5, 0.3, 0.1,
		-0.3, 1.0, 1.0,  0.5, 0.3, 0.1,

		1.3, 1.0, -0.3,   0.5, 0.3, 0.1,
		0.3, 1.5, 0.5,  0.5, 0.3, 0.1,
		1.3, 1.0, 1.0,    0.5, 0.3, 0.1,

		0, 1.9, 0.25, 0.25, 0.5, 1.0,
		-0.25, 2.75, -0.5, 0.17, 0.67, 1.0,
		0.25, 2.75, -0.5, 0.34, 0.67, 1.0,
		0, 2.9, 0.25, 0.42, 0.5, 1.0,
		-0.25, 2.75, -0.5, 0.34, 0.67, 1.0,
		0, 3.25, -0.5, 0.42, 0.67, 1.0,
		0, 2.9, 0.25, 0.42, 0.5, 1.0,
		0.25, 2.75, -0.5, 0.5, 0.67, 1.0,
		0, 3.25, -0.5, 0.42, 0.67, 1.0,
		0, 2.9, -2, 0.42, 0.83, 1.0,
		0.25, 2.75, -0.5, 0.5, 0.67, 1.0,
		0, 3.25, -0.5, 0.42, 0.67, 1.0,
		0, 2.9, -2, 0.17, 0.67, 1.0,
		-0.25, 2.75, -0.5, 0.34, 0.67, 1.0,
		0.25, 2.75, -0.5, 0.25, 0.83, 1.0,
		0, 2.9, -2, 0.42, 0.83, 1.0,
		-0.25, 2.75, -0.5, 0.34, 0.67, 1.0,
		0, 3.25, -0.5, 0.42, 0.67, 1.0,
		0, 2.8, -0.3, 0.39, 1, 1.0,
		0, 2.85, -1, 0.5, 1, 1.0,
		2, 4, -0.5, 0.5, 0.83, 1.0,
		0, 2.8, -0.3, 0.28, 1, 1.0,
		0, 2.8, -1, 0.39, 1, 1.0,
		-2, 4, -0.5, 0.39, 0.83, 1.0,

	  ]

	  var planeIndices = [
		108, 109, 110,
		111, 109, 113,
		111, 110, 113,
		117, 110, 113,
		117, 109, 110,
		117, 109, 114,
		127, 128, 129,
		127, 130, 131

		

	];

	  var houseBufferObject = gl.createBuffer();
	  gl.bindBuffer(gl.ARRAY_BUFFER, houseBufferObject);
	  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(houseVertices), gl.STATIC_DRAW);

	  var planeIndexBuffer = gl.createBuffer();
	gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, planeIndexBuffer);
	gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(planeIndices), gl.STATIC_DRAW);

  gl.useProgram(program)

	var matWorldUniformLocation = gl.getUniformLocation(program, 'mWorld');
	var matViewUniformLocation = gl.getUniformLocation(program, 'mView');
	var matProjUniformLocation = gl.getUniformLocation(program, 'mProj');

	var worldMatrix = new Float32Array(16);
	var viewMatrix = new Float32Array(16);
	var projMatrix = new Float32Array(16);
	glMatrix.mat4.identity(worldMatrix);
	glMatrix.mat4.lookAt(viewMatrix, [3, 3, -6], [0, 0.5, 0], [0, 1, 0]);
	glMatrix.mat4.perspective(projMatrix, glMatrix.glMatrix.toRadian(45), canvas.clientWidth / canvas.clientHeight, 0.1, 1000.0);

	gl.uniformMatrix4fv(matWorldUniformLocation, gl.FALSE, worldMatrix);
	gl.uniformMatrix4fv(matViewUniformLocation, gl.FALSE, viewMatrix);
	gl.uniformMatrix4fv(matProjUniformLocation, gl.FALSE, projMatrix);


	// Main render loop

  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

  gl.bindBuffer(gl.ARRAY_BUFFER, axesBufferObject);

  var positionAttribLocation = gl.getAttribLocation(program, 'vertPosition');
	var colorAttribLocation = gl.getAttribLocation(program, 'vertColor');
	gl.vertexAttribPointer(
		positionAttribLocation,
		3,
		gl.FLOAT,
		gl.FALSE,
		6 * Float32Array.BYTES_PER_ELEMENT,
		0
	);
	gl.vertexAttribPointer(
		colorAttribLocation,
		3,
		gl.FLOAT,
		gl.FALSE,
		6 * Float32Array.BYTES_PER_ELEMENT,
		3 * Float32Array.BYTES_PER_ELEMEN
	);
	gl.enableVertexAttribArray(positionAttribLocation);
	gl.enableVertexAttribArray(colorAttribLocation);

	

	gl.bindBuffer(gl.ARRAY_BUFFER, houseBufferObject);

  gl.vertexAttribPointer(
		positionAttribLocation,
		3,
		gl.FLOAT,
		gl.FALSE,
		6 * Float32Array.BYTES_PER_ELEMENT,
		3 * Float32Array.BYTES_PER_ELEMENT
	);
	gl.vertexAttribPointer(
		colorAttribLocation,
		3,
		gl.FLOAT,
		gl.FALSE,
		6 * Float32Array.BYTES_PER_ELEMENT,
		3 * Float32Array.BYTES_PER_ELEMENT
	);
	var houseVertexCount = 108;
	var airplaneVertexCount = 24;

	var identityMatrix = new Float32Array(16);
	glMatrix.mat4.identity(identityMatrix);
	var positionAttribLocation = gl.getAttribLocation(program, 'vertPosition');
	var colorAttribLocation = gl.getAttribLocation(program, 'vertColor');

	let change_x = (Math.random() * 0.02) - 0.01
	let change_y = (Math.random() * 0.02) - 0.01
	let change_z = (Math.random() * 0.02) - 0.01
	let current_airplane_pos = [0,0,0]

	var R = 10;
    var dY = 2;
	let loop = function () {
		// dY += 0.03
		angle = performance.now() / 1000 / 6 * 2 * Math.PI;
		let phi = Math.PI / 4;
        let cameraX = Math.sqrt((R**2-dY**2))*Math.cos(angle)
		let cameraY = dY
		let cameraZ = Math.sqrt((R**2-dY**2))*Math.sin(angle)
		glMatrix.mat4.lookAt(viewMatrix, [cameraX, cameraY, cameraZ], [0, 0, 0], [0, 1, 0]);

        gl.uniformMatrix4fv(matViewUniformLocation, gl.FALSE, viewMatrix);
		gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
	
		// render axes
		gl.bindBuffer(gl.ARRAY_BUFFER, axesBufferObject);
		gl.vertexAttribPointer(
			positionAttribLocation,
			3,
			gl.FLOAT,
			gl.FALSE,
			6 * Float32Array.BYTES_PER_ELEMENT,
			0
		);
		gl.vertexAttribPointer(
			colorAttribLocation,
			3,
			gl.FLOAT,
			gl.FALSE,
			6 * Float32Array.BYTES_PER_ELEMENT,
			3 * Float32Array.BYTES_PER_ELEMENT
		);
		gl.enableVertexAttribArray(positionAttribLocation);
		gl.enableVertexAttribArray(colorAttribLocation);
		glMatrix.mat4.identity(worldMatrix);
		var identityMatrix = new Float32Array(16);
		glMatrix.mat4.identity(identityMatrix);
		// glMatrix.mat4.rotate(worldMatrix, identityMatrix, angle, [0, 1, 0]);
		gl.uniformMatrix4fv(matWorldUniformLocation, gl.FALSE, worldMatrix);
		gl.drawArrays(gl.LINES, 0, 6);
	
		gl.bindBuffer(gl.ARRAY_BUFFER, houseBufferObject);
		gl.vertexAttribPointer(
			positionAttribLocation,
			3,
			gl.FLOAT,
			gl.FALSE,
			6 * Float32Array.BYTES_PER_ELEMENT,
			0
		);
		gl.vertexAttribPointer(
			colorAttribLocation,
			3,
			gl.FLOAT,
			gl.FALSE,
			6 * Float32Array.BYTES_PER_ELEMENT,
			3 * Float32Array.BYTES_PER_ELEMENT
		);
		gl.enableVertexAttribArray(positionAttribLocation);
		gl.enableVertexAttribArray(colorAttribLocation);

	
		glMatrix.mat4.identity(worldMatrix);
		var identityMatrix = new Float32Array(16);
		glMatrix.mat4.identity(identityMatrix);
		// glMatrix.mat4.rotate(worldMatrix, identityMatrix, angle, [0, 1, 0]);
		gl.uniformMatrix4fv(matWorldUniformLocation, gl.FALSE, worldMatrix);
	
		// render house
		gl.drawArrays(gl.TRIANGLES, 0, houseVertexCount);

		let copyMatrix = new Float32Array(16);
		glMatrix.mat4.identity(copyMatrix);

		// glMatrix.mat4.rotate(copyMatrix, copyMatrix, angle, [0, 1, 0]);
		glMatrix.mat4.translate(copyMatrix, copyMatrix, [-2, 0, 1]);

		gl.uniformMatrix4fv(matWorldUniformLocation, gl.FALSE, copyMatrix);

		gl.drawArrays(gl.TRIANGLES, 48, 60);


		copyMatrix = new Float32Array(16);
		glMatrix.mat4.identity(copyMatrix);

		// glMatrix.mat4.rotate(copyMatrix, copyMatrix, angle, [0, 1, 0]);
		glMatrix.mat4.translate(copyMatrix, copyMatrix, [-3, 0, -1.5]);

		gl.uniformMatrix4fv(matWorldUniformLocation, gl.FALSE, copyMatrix);

		gl.drawArrays(gl.TRIANGLES, 48, 60);
	
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, planeIndexBuffer);
		glMatrix.mat4.identity(worldMatrix);
		current_airplane_pos[0] += change_x
		current_airplane_pos[1] += change_y
		current_airplane_pos[2] += change_z
		glMatrix.mat4.translate(worldMatrix, identityMatrix, current_airplane_pos);
		if (current_airplane_pos[0] > 1 || current_airplane_pos[1] > 1 || current_airplane_pos[2] > 1 || current_airplane_pos[0] < -1 || current_airplane_pos[1] < -1 || current_airplane_pos[2] < -1) {
			change_x = -change_x
			change_y = change_y
			change_z = change_z
		}
		gl.uniformMatrix4fv(matWorldUniformLocation, gl.FALSE, worldMatrix);
	
		// render plane
		// gl.drawArrays(gl.TRIANGLES, houseVertexCount, airplaneVertexCount);
		gl.drawElements(gl.TRIANGLES, planeIndices.length, gl.UNSIGNED_SHORT, 0);
	
		requestAnimationFrame(loop);
	};
	requestAnimationFrame(loop);
	
};
